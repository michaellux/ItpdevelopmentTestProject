@model Tuple<IEnumerable<Project>, IEnumerable<ItpdevelopmentTestProject.Models.Task>, IEnumerable<Project>>
@{
    ViewData["Title"] = "Projects";
    ViewData["Number in order"] = "#";
    ViewData["Description of the task. It can be either a file or just a text field, provide for switching."] = "Description";

    var projectModel = Model.Item1;
    var taskModel = Model.Item2;
}
<style>
    section.project {
        margin-bottom: 3rem;
        border: 1px solid #cfbfbf;
        padding: 2rem;
    }

    .created {
        margin-bottom: 0rem;
    }
</style>
<script type="text/javascript">
    Vue.component('vue-project', {
        components: {
            Pagination
        },
        props: {
            id: String,
            total: String
        },
        data() {
            return {
                page: 1,
                perPage: 2,
                project: null,
                newStartDate: null,
                newEndDate: null,
                filteredTasksAmount: null
            }
        },
        mounted() {
            
            this.getProject(this.id).then((data) => {
               this.project = data;

                let startDate = Math.min(
                    ...this.project.Tasks.map(element => {
                        return new Date(element.StartDate);
                    }));
                this.newStartDate = new Date(startDate).toISOString().substring(0, 10);
                //return valueForInput;

                let endDate = Math.max(
                    ...this.project.Tasks.map(element => {
                        return new Date(element.CancelDate);
                    }));
                this.newEndDate = new Date(endDate).toISOString().substring(0, 10);
                //return valueForInput;
            });
        },
        computed: {
            displayedRecords: {
                get()
                {
                    const startIndex = this.perPage * (this.page - 1);
                    const endIndex = startIndex + this.perPage;

                    let tasks = this.project.Tasks;

                    tasks = tasks.map((obj, order) => ({ ...obj, order: ++order }));

                    tasks = tasks.filter((task) => {
                        let newStartDate = new Date(this.newStartDate).getTime();
                        let newEndDate = new Date(this.newEndDate).getTime();

                        let startDateTask = new Date(task.StartDate.substring(0, 10)).getTime();
                        let endDateTask = new Date( task.CancelDate == null ? this.newEndDate : task.CancelDate.substring(0,10) ).getTime();


                        console.log(startDateTask);
                        console.log(endDateTask);

                        if ((newStartDate > newEndDate) || (isNaN(newStartDate)) ) {
                            this.newStartDate = this.newEndDate;
                        }
                        if ( (newEndDate < newStartDate) || (isNaN(newEndDate)) )
                        {
                            this.newEndDate = this.newStartDate;
                        }


                        return ( (newStartDate <= startDateTask) && (newEndDate >= endDateTask) )
                    });

                    this.filteredTasksAmount = tasks.length;

                    return tasks.slice(startIndex, endIndex);
                },             
            },
        },
        methods: {
            async getProject(id)
            {
                const res = await fetch('/Home/GetProject?id=' + id);
                const project = await res.json();
                return project;
            },
            callback: function (page) {
                // no need for callback here since you have all your data loaded already
            },
        },
        template: '#vue-project-template'
    });
    Vue.component('vue-task', {
        props: {
            task: Object,
            times: null
        },
        mounted() {
            this.getTask(this.id).then((data) => {
                this.task = data;
            })
            
        },
        methods: {
            async getTask(id) {
                const res = await fetch('/Home/GetTask?id=' + id);
                const task = await res.json();
                return task;
            },
        },
        template: '#vue-task-template'
    });
    Vue.component('vue-comment', {
        props: {
            comment: Object,
        },
        template: '#vue-comment-template'
    });

</script>
<script type="text/template" id="vue-project-template">    
     <section class="project">
        <h2 v-if="id">{{project.ProjectName}}</h2>
        <p class="created">Created: {{project.CreateDateTime}}</p>
        <p class="updated">Updated: {{project.UpdateDateTime}}</p>

        <form>
              <div class="form-row">
                    <div class="col-3">
                        <label class="form-label">Start date</label>
                        <input v-model="newStartDate" type="date" id="StartDate" name="StartDate" class="startDate form-control" />
                    </div>
                    <div class="col-3">
                        <label class="form-label">End date</label>
                        <input v-model="newEndDate" type="date" id="EndDate" name="EndDate" class="endDate form-control" />
                    </div>
              </div>
        </form>

        @{
            var task = projectModel.First().Tasks.First();
        }
        <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    @ViewData["Number in order"]
                </th>
                <th>
                    @Html.DisplayNameFor(project => task.SpentTime)
                </th>
                <th>
                    @Html.DisplayNameFor(project => task.TaskName)
                </th>
                <th>
                    @ViewData["Description of the task. It can be either a file or just a text field, provide for switching."]
                </th>
                <th>
                    @Html.DisplayNameFor(project => task.StartDate)
                </th>
                <th>
                    @Html.DisplayNameFor(project => task.CancelDate)
                </th>
            </tr>
        </thead>
        <tbody>
            <vue-task v-for="(task, index) in displayedRecords" :task="task" :key="index">

            </vue-task>
            
        </tbody>
    </table>
    <p>Total time: {{total}}</p>
      <pagination :records="filteredTasksAmount" v-model="page" :per-page="perPage">
              </pagination>
     </section>
</script>

<script type="text/template" id="vue-task-template">
    
    <tr class="position-relative">
        <td>
            {{task.order}}
        </td>
        <td>
            {{task.SpentTime}}
        </td>
        <td>
            {{task.TaskName}}
        </td>
        <td>
            <vue-comment v-for="(comment, index) in task.TaskComments" :comment="comment">

            </vue-comment>
        </td>
        <td>
            {{task.StartTime}}
        </td>
        <td v-if="task.CancelDate">
            {{task.EndTime}}
             <a class="stretched-link" :href="'/Home/Task?id=' + task.Id"></a>
        </td>
        <td v-else>
            00:00
             <a class="stretched-link" :href="'/Home/Task?id=' + task.Id"></a>
        </td>
    </tr>
</script>

<script type="text/template" id="vue-comment-template">
    <p v-if="comment.CommentType == 1">
        {{comment.Description}}
    </p>
    <p v-else-if="comment.CommentType == 2">
        <a :href="comment.Description">Attachment</a>
    </p>
</script>
