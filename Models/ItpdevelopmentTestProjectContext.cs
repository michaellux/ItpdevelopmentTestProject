// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ItpdevelopmentTestProject.Models
{
    public partial class ItpdevelopmentTestProjectContext : DbContext
    {
        public ItpdevelopmentTestProjectContext()
        {
        }

        public ItpdevelopmentTestProjectContext(DbContextOptions<ItpdevelopmentTestProjectContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TaskComments> TaskComments { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ItpdevelopmentTestProject;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Task)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_Project");
            });

            modelBuilder.Entity<TaskComments>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Content).IsRequired();

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TaskComments)
                    .HasForeignKey(d => d.TaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaskComments_Task");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        private void FillTestData(ModelBuilder modelBuilder)
        {
            Guid projectGuid1 = new Guid();
            Guid projectGuid2 = new Guid();
            Guid projectGuid3 = new Guid();

            Guid taskGuid1 = new Guid();
            Guid taskGuid2 = new Guid();
            Guid taskGuid3 = new Guid();

            Guid taskCommentsGuid1 = new Guid();
            Guid taskCommentsGuid2 = new Guid();

            modelBuilder.Entity<Project>().HasData(
                new Project
                {
                    Id = projectGuid1,
                    ProjectName = "Solve solution for X",
                    CreateDate = new DateTime(2012, 3, 12, 12, 4, 0),
                    UpdateDate = new DateTime(2012, 6, 10, 15, 3, 2)
                },
                new Project
                {
                    Id = projectGuid2,
                    ProjectName = "Buy new tools",
                    CreateDate = new DateTime(2012, 5, 12, 20, 34, 26),
                    UpdateDate = new DateTime(2012, 6, 10, 12, 44, 25)
                },
                new Project
                {
                    Id = projectGuid3,
                    ProjectName = "Fix update",
                    CreateDate = new DateTime(2012, 9, 12, 20, 34, 26),
                    UpdateDate = new DateTime(2012, 10, 10, 2, 41, 23)
                }
            );

            modelBuilder.Entity<Task>().HasData(
                new Task
                {
                    Id = taskGuid1,
                    TaskName = "Find the reason",
                    ProjectId = projectGuid1,
                    StartDate = new DateTime(2012, 3, 12, 12, 10, 34),
                    CancelDate = new DateTime(2012, 3, 13, 14, 12, 3),
                    CreateDate = new DateTime(2012, 3, 12, 12, 10, 12),
                    UpdateDate = new DateTime(2012, 3, 13, 14, 12, 3)
                },
                new Task
                {
                    Id = taskGuid2,
                    TaskName = "Buy IDE",
                    ProjectId = projectGuid2,
                    StartDate = new DateTime(2020, 5, 7, 4, 34, 34),
                    CancelDate = null,
                    CreateDate = new DateTime(2020, 5, 7, 2, 3, 23),
                    UpdateDate = new DateTime(2020, 5, 7, 4, 34, 34)
                },
                new Task
                {
                    Id = taskGuid3,
                    TaskName = "Change settings",
                    ProjectId = projectGuid3,
                    StartDate = new DateTime(2022, 11, 22, 23, 44, 0),
                    CancelDate = new DateTime(2022, 11, 23, 13, 0, 45),
                    CreateDate = new DateTime(2022, 11, 22, 20, 33, 43),
                    UpdateDate = new DateTime(2022, 11, 23, 12, 0, 4)
                }
            );

            modelBuilder.Entity<TaskComments>().HasData(
                new TaskComments
                {
                    Id = taskCommentsGuid1,
                    TaskId = taskGuid1,
                    CommentType = 1,
                    Content = Encoding.ASCII.GetBytes("I hope to deal with this quickly")
                },
                new TaskComments
                {
                    Id = taskCommentsGuid2,
                    TaskId = taskGuid2,
                    CommentType = 2,
                    Content = System.IO.File.ReadAllBytes("..\\..\\Content\\content.txt")
                }
            );
        }
    }
}
