// <auto-generated />
using System;
using ItpdevelopmentTestProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ItpdevelopmentTestProject.Migrations
{
    [DbContext(typeof(ItpdevelopmentTestProjectContext))]
    [Migration("20240214154215_UpdatedDateTimeValues")]
    partial class UpdatedDateTimeValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f221e8e-d2bf-49c6-b20b-fe23d92c025e"),
                            CreateDate = new DateTimeOffset(new DateTime(2012, 3, 12, 12, 4, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectName = "Solve solution for X",
                            UpdateDate = new DateTimeOffset(new DateTime(2012, 6, 10, 15, 3, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("a9c03847-328f-46ab-8f9f-c23740e2042a"),
                            CreateDate = new DateTimeOffset(new DateTime(2012, 5, 12, 20, 34, 26, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectName = "Buy new tools",
                            UpdateDate = new DateTimeOffset(new DateTime(2012, 6, 10, 12, 44, 25, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("556251ca-df40-4b8b-aceb-5b5fa1eb7d70"),
                            CreateDate = new DateTimeOffset(new DateTime(2012, 9, 12, 20, 34, 26, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectName = "Fix update",
                            UpdateDate = new DateTimeOffset(new DateTime(2012, 10, 10, 2, 41, 23, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dec3368-926a-491f-8b52-416a4d26d1e7"),
                            CancelDate = new DateTimeOffset(new DateTime(2012, 3, 13, 14, 12, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateDate = new DateTimeOffset(new DateTime(2012, 3, 12, 12, 10, 12, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("2f221e8e-d2bf-49c6-b20b-fe23d92c025e"),
                            StartDate = new DateTimeOffset(new DateTime(2012, 3, 12, 12, 10, 34, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TaskName = "Find the reason",
                            UpdateDate = new DateTimeOffset(new DateTime(2012, 3, 13, 14, 12, 3, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("4a11a56d-bf44-4118-9abb-f9d824c156a3"),
                            CreateDate = new DateTimeOffset(new DateTime(2020, 5, 7, 2, 3, 23, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("a9c03847-328f-46ab-8f9f-c23740e2042a"),
                            StartDate = new DateTimeOffset(new DateTime(2020, 5, 7, 4, 34, 34, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TaskName = "Buy IDE",
                            UpdateDate = new DateTimeOffset(new DateTime(2020, 5, 7, 4, 34, 34, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("7ea71d95-4282-4d89-ba46-db8aa1ce6ead"),
                            CancelDate = new DateTimeOffset(new DateTime(2022, 11, 23, 13, 0, 45, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateDate = new DateTimeOffset(new DateTime(2022, 11, 22, 20, 33, 43, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ProjectId = new Guid("556251ca-df40-4b8b-aceb-5b5fa1eb7d70"),
                            StartDate = new DateTimeOffset(new DateTime(2022, 11, 22, 23, 44, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            TaskName = "Change settings",
                            UpdateDate = new DateTimeOffset(new DateTime(2022, 11, 23, 12, 0, 4, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.TaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte>("CommentType")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ca00e82-8276-4834-8990-f2049a7cb99b"),
                            CommentType = (byte)1,
                            Content = new byte[] { 73, 32, 104, 111, 112, 101, 32, 116, 111, 32, 100, 101, 97, 108, 32, 119, 105, 116, 104, 32, 116, 104, 105, 115, 32, 113, 117, 105, 99, 107, 108, 121 },
                            TaskId = new Guid("7dec3368-926a-491f-8b52-416a4d26d1e7")
                        },
                        new
                        {
                            Id = new Guid("bd6314e5-9a9b-4355-8069-3a962f490778"),
                            CommentType = (byte)2,
                            Content = new byte[] { 123, 13, 10, 32, 32, 32, 32, 34, 115, 116, 97, 116, 117, 115, 34, 58, 32, 34, 79, 75, 34, 44, 13, 10, 32, 32, 32, 32, 34, 99, 111, 100, 101, 34, 58, 32, 50, 48, 48, 44, 13, 10, 32, 32, 32, 32, 34, 116, 111, 116, 97, 108, 34, 58, 32, 49, 44, 13, 10, 32, 32, 32, 32, 34, 100, 97, 116, 97, 34, 58, 32, 91, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 105, 100, 34, 58, 32, 49, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 115, 116, 114, 101, 101, 116, 34, 58, 32, 34, 52, 53, 55, 32, 70, 97, 104, 101, 121, 32, 82, 105, 118, 101, 114, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 115, 116, 114, 101, 101, 116, 78, 97, 109, 101, 34, 58, 32, 34, 79, 39, 67, 111, 110, 110, 101, 108, 108, 32, 82, 105, 118, 101, 114, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 98, 117, 105, 108, 100, 105, 110, 103, 78, 117, 109, 98, 101, 114, 34, 58, 32, 34, 54, 55, 54, 48, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 105, 116, 121, 34, 58, 32, 34, 80, 114, 111, 104, 97, 115, 107, 97, 102, 111, 114, 116, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 122, 105, 112, 99, 111, 100, 101, 34, 58, 32, 34, 57, 49, 55, 51, 56, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 111, 117, 110, 116, 114, 121, 34, 58, 32, 34, 83, 97, 110, 32, 77, 97, 114, 105, 110, 111, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 111, 117, 110, 116, 121, 95, 99, 111, 100, 101, 34, 58, 32, 34, 86, 71, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 108, 97, 116, 105, 116, 117, 100, 101, 34, 58, 32, 53, 49, 46, 49, 50, 55, 51, 55, 51, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 108, 111, 110, 103, 105, 116, 117, 100, 101, 34, 58, 32, 49, 52, 50, 46, 56, 57, 56, 55, 49, 57, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 93, 13, 10, 125 },
                            TaskId = new Guid("4a11a56d-bf44-4118-9abb-f9d824c156a3")
                        });
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.Task", b =>
                {
                    b.HasOne("ItpdevelopmentTestProject.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.TaskComment", b =>
                {
                    b.HasOne("ItpdevelopmentTestProject.Models.Task", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskComments_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ItpdevelopmentTestProject.Models.Task", b =>
                {
                    b.Navigation("TaskComments");
                });
#pragma warning restore 612, 618
        }
    }
}
